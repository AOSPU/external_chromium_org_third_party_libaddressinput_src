// Copyright (C) 2013 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The data in this file will be automatically generated. For now, the data
// comes from:
//
// https://code.google.com/p/libaddressinput/source/browse/trunk/java/src/com/android/i18n/addressinput/RegionDataConstants.java?r=137

#include "region_data_constants.h"

#include <algorithm>
#include <cstddef>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

#include <libaddressinput/address_field.h>
#include <libaddressinput/util/basictypes.h>

#include "address_field_util.h"
#include "lookup_key.h"

namespace i18n {
namespace addressinput {

// ---- BEGIN AUTOGENERATED CODE ----
namespace {

std::map<std::string, std::string> InitRegionData() {
  std::map<std::string, std::string> region_data;
  region_data.insert(std::make_pair("AC", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("AD", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %S\","
      "\"require\":\"AS\","
      "\"state_name_type\":\"parish\","
      "\"languages\":\"ca\""
      "}"));
  region_data.insert(std::make_pair("AE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C\","
      "\"require\":\"AC\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("AF", "{"
      "\"languages\":\"fa~ps\""
      "}"));
  region_data.insert(std::make_pair("AG", "{"
      "\"require\":\"A\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("AI", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("AL", "{"
      "\"languages\":\"sq\""
      "}"));
  region_data.insert(std::make_pair("AM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z%n%C%n%S\","
      "\"lfmt\":\"%N%n%O%n%A%n%Z%n%C%n%S\","
      "\"languages\":\"hy\""
      "}"));
  region_data.insert(std::make_pair("AO", "{"
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("AQ", "{"
      "}"));
  region_data.insert(std::make_pair("AR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C%n%S\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("AS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"sm~en\""
      "}"));
  region_data.insert(std::make_pair("AT", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"de\""
      "}"));
  region_data.insert(std::make_pair("AU", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("AW", "{"
      "\"languages\":\"nl~pap\""
      "}"));
  region_data.insert(std::make_pair("AX", "{"
      "\"fmt\":\"%O%n%N%n%A%nAX-%Z %C%n\u00c5LAND\","
      "\"require\":\"ACZ\","
      "\"languages\":\"sv\""
      "}"));
  region_data.insert(std::make_pair("AZ", "{"
      "\"fmt\":\"%N%n%O%n%A%nAZ %Z %C\","
      "\"languages\":\"az-Latn~az-Cyrl\""
      "}"));
  region_data.insert(std::make_pair("BA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"bs-Cyrl~bs-Latn~hr~sr-Cyrl~sr-Latn\""
      "}"));
  region_data.insert(std::make_pair("BB", "{"
      "\"state_name_type\":\"parish\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("BD", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C - %Z\","
      "\"languages\":\"bn\""
      "}"));
  region_data.insert(std::make_pair("BE", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"nl~fr~de\""
      "}"));
  region_data.insert(std::make_pair("BF", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %X\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("BG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"bg\""
      "}"));
  region_data.insert(std::make_pair("BH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("BI", "{"
      "\"languages\":\"rn~fr\""
      "}"));
  region_data.insert(std::make_pair("BJ", "{"
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("BL", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("BM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("BN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ms-Latn~ms-Arab\""
      "}"));
  region_data.insert(std::make_pair("BO", "{"
      "\"languages\":\"es~qu~ay\""
      "}"));
  region_data.insert(std::make_pair("BR", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C-%S%n%Z\","
      "\"require\":\"ASCZ\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("BS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %S\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("BT", "{"
      "\"languages\":\"dz\""
      "}"));
  region_data.insert(std::make_pair("BV", "{"
      "}"));
  region_data.insert(std::make_pair("BW", "{"
      "\"languages\":\"en~tn\""
      "}"));
  region_data.insert(std::make_pair("BY", "{"
      "\"fmt\":\"%S%n%Z %C %X%n%A%n%O%n%N\","
      "\"languages\":\"be~ru\""
      "}"));
  region_data.insert(std::make_pair("BZ", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("CA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"languages\":\"en~fr\""
      "}"));
  region_data.insert(std::make_pair("CC", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C %S %Z\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("CD", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %X\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("CF", "{"
      "\"languages\":\"fr~sg\""
      "}"));
  region_data.insert(std::make_pair("CG", "{"
      "\"languages\":\"fr~ln\""
      "}"));
  region_data.insert(std::make_pair("CH", "{"
      "\"fmt\":\"%O%n%N%n%A%nCH-%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"de~fr~it\""
      "}"));
  region_data.insert(std::make_pair("CI", "{"
      "\"fmt\":\"%N%n%O%n%X %A %C %X\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("CK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("CL", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C%n%S\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("CM", "{"
      "\"languages\":\"fr~en\""
      "}"));
  region_data.insert(std::make_pair("CN", "{"
      "\"fmt\":\"%Z%n%S%C%D%n%A%n%O%n%N\","
      "\"lfmt\":\"%N%n%O%n%A, %D%n%C%n%S, %Z\","
      "\"require\":\"ACSZ\","
      "\"languages\":\"zh-Hans\""
      "}"));
  region_data.insert(std::make_pair("CO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %S\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("CR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("CV", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C%n%S\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("CX", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C %S %Z\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("CY", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"el~tr\""
      "}"));
  region_data.insert(std::make_pair("CZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"cs\""
      "}"));
  region_data.insert(std::make_pair("DE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"de\""
      "}"));
  region_data.insert(std::make_pair("DJ", "{"
      "\"languages\":\"ar~fr\""
      "}"));
  region_data.insert(std::make_pair("DK", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"da\""
      "}"));
  region_data.insert(std::make_pair("DM", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("DO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("DZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ar~fr\""
      "}"));
  region_data.insert(std::make_pair("EC", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z%n%C\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("EE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"et\""
      "}"));
  region_data.insert(std::make_pair("EG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S%n%Z\","
      "\"lfmt\":\"%N%n%O%n%A%n%C%n%S%n%Z\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("EH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("ER", "{"
      "\"languages\":\"ti~en~ar\""
      "}"));
  region_data.insert(std::make_pair("ES", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C %S\","
      "\"require\":\"ACSZ\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("ET", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"am\""
      "}"));
  region_data.insert(std::make_pair("FI", "{"
      "\"fmt\":\"%O%n%N%n%A%nFI-%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fi~sv\""
      "}"));
  region_data.insert(std::make_pair("FJ", "{"
      "\"languages\":\"en~fj\""
      "}"));
  region_data.insert(std::make_pair("FK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("FM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"chk~pon~kos~yap~en~uli\""
      "}"));
  region_data.insert(std::make_pair("FO", "{"
      "\"fmt\":\"%N%n%O%n%A%nFO%Z %C\","
      "\"languages\":\"fo\""
      "}"));
  region_data.insert(std::make_pair("FR", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("GA", "{"
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("GB", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S%n%Z\","
      "\"require\":\"ACZ\","
      "\"state_name_type\":\"county\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GD", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ka\""
      "}"));
  region_data.insert(std::make_pair("GF", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("GG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%nGUERNSEY%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GH", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GI", "{"
      "\"fmt\":\"%N%n%O%n%A\","
      "\"require\":\"A\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GL", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"kl~da\""
      "}"));
  region_data.insert(std::make_pair("GM", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("GN", "{"
      "\"fmt\":\"%N%n%O%n%Z %A %C\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("GP", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("GQ", "{"
      "\"languages\":\"es~fr\""
      "}"));
  region_data.insert(std::make_pair("GR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"el\""
      "}"));
  region_data.insert(std::make_pair("GS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\""
      "}"));
  region_data.insert(std::make_pair("GT", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z- %C\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("GU", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en~ch\""
      "}"));
  region_data.insert(std::make_pair("GW", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("GY", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("HK", "{"
      "\"fmt\":\"%S%n%A%n%O%n%N\","
      "\"lfmt\":\"%N%n%O%n%A%n%S\","
      "\"require\":\"AS\","
      "\"state_name_type\":\"area\","
      "\"languages\":\"zh-Hant~en\""
      "}"));
  region_data.insert(std::make_pair("HM", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C %S %Z\""
      "}"));
  region_data.insert(std::make_pair("HN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %S%n%Z\","
      "\"require\":\"ACS\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("HR", "{"
      "\"fmt\":\"%N%n%O%n%A%nHR-%Z %C\","
      "\"languages\":\"hr\""
      "}"));
  region_data.insert(std::make_pair("HT", "{"
      "\"fmt\":\"%N%n%O%n%A%nHT%Z %C %X\","
      "\"languages\":\"ht~fr\""
      "}"));
  region_data.insert(std::make_pair("HU", "{"
      "\"fmt\":\"%N%n%O%n%C%n%A%n%Z\","
      "\"languages\":\"hu\""
      "}"));
  region_data.insert(std::make_pair("ID", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S %Z\","
      "\"state_name_type\":\"district\","
      "\"languages\":\"id\""
      "}"));
  region_data.insert(std::make_pair("IE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S\","
      "\"state_name_type\":\"county\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("IL", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"iw~ar\""
      "}"));
  region_data.insert(std::make_pair("IM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en~gv\""
      "}"));
  region_data.insert(std::make_pair("IN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z%n%S\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("IO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("IQ", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C, %S%n%Z\","
      "\"require\":\"ACS\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("IS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"is\""
      "}"));
  region_data.insert(std::make_pair("IT", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C %S\","
      "\"require\":\"ACSZ\","
      "\"languages\":\"it\""
      "}"));
  region_data.insert(std::make_pair("JE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%nJERSEY%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("JM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S %X\","
      "\"require\":\"ACS\","
      "\"state_name_type\":\"parish\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("JO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("JP", "{"
      "\"fmt\":\"\u3012%Z%n%S%C%n%A%n%O%n%N\","
      "\"lfmt\":\"%N%n%O%n%A%n%C, %S%n%Z\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"prefecture\","
      "\"languages\":\"ja\""
      "}"));
  region_data.insert(std::make_pair("KE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%Z\","
      "\"languages\":\"en~sw\""
      "}"));
  region_data.insert(std::make_pair("KG", "{"
      "\"fmt\":\"%Z %C %X%n%A%n%O%n%N\","
      "\"languages\":\"ky-Cyrl~ru\""
      "}"));
  region_data.insert(std::make_pair("KH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"km\""
      "}"));
  region_data.insert(std::make_pair("KI", "{"
      "\"fmt\":\"%N%n%O%n%A%n%S%n%C\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"en~gil\""
      "}"));
  region_data.insert(std::make_pair("KM", "{"
      "\"languages\":\"ar~fr~zdj\""
      "}"));
  region_data.insert(std::make_pair("KN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %S\","
      "\"require\":\"ACS\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("KR", "{"
      "\"fmt\":\"%S %C%D%n%A%n%O%n%N%n%Z\","
      "\"lfmt\":\"%N%n%O%n%A%n%D%n%C%n%S%n%Z\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"do_si\","
      "\"languages\":\"ko\""
      "}"));
  region_data.insert(std::make_pair("KW", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("KY", "{"
      "\"fmt\":\"%N%n%O%n%A%n%S\","
      "\"require\":\"AS\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("KZ", "{"
      "\"fmt\":\"%Z%n%S%n%C%n%A%n%O%n%N\","
      "\"languages\":\"ru~kk-Cyrl\""
      "}"));
  region_data.insert(std::make_pair("LA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"lo\""
      "}"));
  region_data.insert(std::make_pair("LB", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("LC", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("LI", "{"
      "\"fmt\":\"%O%n%N%n%A%nFL-%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"de~gsw\""
      "}"));
  region_data.insert(std::make_pair("LK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%Z\","
      "\"languages\":\"si~ta\""
      "}"));
  region_data.insert(std::make_pair("LR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C %X\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("LS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"st~en\""
      "}"));
  region_data.insert(std::make_pair("LT", "{"
      "\"fmt\":\"%O%n%N%n%A%nLT-%Z %C\","
      "\"languages\":\"lt\""
      "}"));
  region_data.insert(std::make_pair("LU", "{"
      "\"fmt\":\"%O%n%N%n%A%nL-%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr~lb~de\""
      "}"));
  region_data.insert(std::make_pair("LV", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %Z\","
      "\"languages\":\"lv\""
      "}"));
  region_data.insert(std::make_pair("LY", "{"
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("MA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ar~fr~tzm-Latn\""
      "}"));
  region_data.insert(std::make_pair("MC", "{"
      "\"fmt\":\"%N%n%O%n%A%nMC-%Z %C %X\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("MD", "{"
      "\"fmt\":\"%N%n%O%n%A%nMD-%Z %C\","
      "\"languages\":\"ro\""
      "}"));
  region_data.insert(std::make_pair("ME", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"sr-Latn\""
      "}"));
  region_data.insert(std::make_pair("MF", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("MG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"mg~fr~en\""
      "}"));
  region_data.insert(std::make_pair("MH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en~mh\""
      "}"));
  region_data.insert(std::make_pair("MK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"mk~sq\""
      "}"));
  region_data.insert(std::make_pair("ML", "{"
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("MN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%S %C-%X%n%Z\","
      "\"languages\":\"mn-Cyrl\""
      "}"));
  region_data.insert(std::make_pair("MO", "{"
      "\"fmt\":\"%A%n%O%n%N\","
      "\"lfmt\":\"%N%n%O%n%A\","
      "\"require\":\"A\","
      "\"languages\":\"zh-Hant~pt\""
      "}"));
  region_data.insert(std::make_pair("MP", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("MQ", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("MR", "{"
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("MS", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("MT", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"mt~en\""
      "}"));
  region_data.insert(std::make_pair("MU", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z%n%C\","
      "\"languages\":\"en~fr\""
      "}"));
  region_data.insert(std::make_pair("MV", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"dv\""
      "}"));
  region_data.insert(std::make_pair("MW", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %X\","
      "\"languages\":\"en~ny\""
      "}"));
  region_data.insert(std::make_pair("MX", "{"
      "\"fmt\":\"%N%n%O%n%A%n%D%n%Z %C, %S\","
      "\"require\":\"ACZ\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("MY", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C, %S\","
      "\"require\":\"ACZ\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"ms\""
      "}"));
  region_data.insert(std::make_pair("MZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("NA", "{"
      "\"languages\":\"af~en\""
      "}"));
  region_data.insert(std::make_pair("NC", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("NE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("NF", "{"
      "\"fmt\":\"%O%n%N%n%A%n%C %S %Z\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("NG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z%n%S\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("NI", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z%n%C, %S\","
      "\"state_name_type\":\"department\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("NL", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"nl\""
      "}"));
  region_data.insert(std::make_pair("NO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"no~nn\""
      "}"));
  region_data.insert(std::make_pair("NP", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ne\""
      "}"));
  region_data.insert(std::make_pair("NR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%S\","
      "\"require\":\"AS\","
      "\"state_name_type\":\"district\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("NU", "{"
      "\"languages\":\"en~niu\""
      "}"));
  region_data.insert(std::make_pair("NZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en~mi\""
      "}"));
  region_data.insert(std::make_pair("OM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z%n%C\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("PA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("PE", "{"
      "\"languages\":\"es~qu\""
      "}"));
  region_data.insert(std::make_pair("PF", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C %S\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"fr~ty\""
      "}"));
  region_data.insert(std::make_pair("PG", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z %S\","
      "\"require\":\"ACS\","
      "\"languages\":\"tpi~en~ho\""
      "}"));
  region_data.insert(std::make_pair("PH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C%n%S\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("PK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C-%Z\","
      "\"languages\":\"ur~en\""
      "}"));
  region_data.insert(std::make_pair("PL", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"pl\""
      "}"));
  region_data.insert(std::make_pair("PM", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("PN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("PR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C PR %Z\","
      "\"require\":\"ACZ\","
      "\"zip_name_type\":\"zip\","
      "\"languages\":\"es~en\""
      "}"));
  region_data.insert(std::make_pair("PS", "{"
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("PT", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("PW", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"pau~en\""
      "}"));
  region_data.insert(std::make_pair("PY", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"gn~es\""
      "}"));
  region_data.insert(std::make_pair("QA", "{"
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("RE", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("RO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ro\""
      "}"));
  region_data.insert(std::make_pair("RS", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"sr-Cyrl~sr-Latn\""
      "}"));
  region_data.insert(std::make_pair("RU", "{"
      "\"fmt\":\"%Z %C  %n%A%n%O%n%N\","
      "\"require\":\"ACZ\","
      "\"languages\":\"ru\""
      "}"));
  region_data.insert(std::make_pair("RW", "{"
      "\"languages\":\"rw~fr~en\""
      "}"));
  region_data.insert(std::make_pair("SA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("SB", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("SC", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"fr~en\""
      "}"));
  region_data.insert(std::make_pair("SE", "{"
      "\"fmt\":\"%O%n%N%n%A%nSE-%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"sv\""
      "}"));
  region_data.insert(std::make_pair("SG", "{"
      "\"fmt\":\"%N%n%O%n%A%nSINGAPORE %Z\","
      "\"require\":\"AZ\","
      "\"languages\":\"en~zh-Hans~ms-Latn~ta\""
      "}"));
  region_data.insert(std::make_pair("SH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("SI", "{"
      "\"fmt\":\"%N%n%O%n%A%nSI- %Z %C\","
      "\"languages\":\"sl\""
      "}"));
  region_data.insert(std::make_pair("SJ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"no\""
      "}"));
  region_data.insert(std::make_pair("SK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"sk\""
      "}"));
  region_data.insert(std::make_pair("SL", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("SM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"AZ\","
      "\"languages\":\"it\""
      "}"));
  region_data.insert(std::make_pair("SN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"fr~wo\""
      "}"));
  region_data.insert(std::make_pair("SO", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C, %S %Z\","
      "\"require\":\"ACS\","
      "\"languages\":\"so\""
      "}"));
  region_data.insert(std::make_pair("SR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %X%n%S\","
      "\"languages\":\"nl\""
      "}"));
  region_data.insert(std::make_pair("ST", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %X\","
      "\"languages\":\"pt\""
      "}"));
  region_data.insert(std::make_pair("SV", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z-%C%n%S\","
      "\"require\":\"ACS\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("SZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%Z\","
      "\"languages\":\"en~ss\""
      "}"));
  region_data.insert(std::make_pair("TA", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("TC", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("TD", "{"
      "\"languages\":\"fr~ar\""
      "}"));
  region_data.insert(std::make_pair("TF", "{"
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("TG", "{"
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("TH", "{"
      "\"fmt\":\"%N%n%O%n%A%n%D %C%n%S %Z\","
      "\"lfmt\":\"%N%n%O%n%A%n%D, %C%n%S %Z\","
      "\"languages\":\"th\""
      "}"));
  region_data.insert(std::make_pair("TJ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"tg-Cyrl\""
      "}"));
  region_data.insert(std::make_pair("TK", "{"
      "\"languages\":\"en~tkl\""
      "}"));
  region_data.insert(std::make_pair("TL", "{"
      "\"languages\":\"pt~tet\""
      "}"));
  region_data.insert(std::make_pair("TM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"tk-Latn\""
      "}"));
  region_data.insert(std::make_pair("TN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"ar~fr\""
      "}"));
  region_data.insert(std::make_pair("TO", "{"
      "\"languages\":\"to~en\""
      "}"));
  region_data.insert(std::make_pair("TR", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"ACZ\","
      "\"languages\":\"tr\""
      "}"));
  region_data.insert(std::make_pair("TT", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("TV", "{"
      "\"fmt\":\"%N%n%O%n%A%n%X%n%C%n%S\","
      "\"state_name_type\":\"island\","
      "\"languages\":\"tyv\""
      "}"));
  region_data.insert(std::make_pair("TW", "{"
      "\"fmt\":\"%Z%n%S%C%n%A%n%O%n%N\","
      "\"lfmt\":\"%N%n%O%n%A%n%C, %S %Z\","
      "\"require\":\"ACSZ\","
      "\"state_name_type\":\"county\","
      "\"languages\":\"zh-Hant\""
      "}"));
  region_data.insert(std::make_pair("TZ", "{"
      "\"languages\":\"sw~en\""
      "}"));
  region_data.insert(std::make_pair("UA", "{"
      "\"fmt\":\"%Z %C%n%A%n%O%n%N\","
      "\"languages\":\"uk~ru\""
      "}"));
  region_data.insert(std::make_pair("UG", "{"
      "\"languages\":\"sw~en\""
      "}"));
  region_data.insert(std::make_pair("UM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACS\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("US", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("UY", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C %S\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("UZ", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C%n%S\","
      "\"languages\":\"uz-Latn~uz-Cyrl\""
      "}"));
  region_data.insert(std::make_pair("VA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"la\""
      "}"));
  region_data.insert(std::make_pair("VC", "{"
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("VE", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %Z, %S\","
      "\"require\":\"ACS\","
      "\"languages\":\"es\""
      "}"));
  region_data.insert(std::make_pair("VG", "{"
      "\"require\":\"A\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("VI", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C %S %Z\","
      "\"require\":\"ACSZ\","
      "\"zip_name_type\":\"zip\","
      "\"state_name_type\":\"state\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("VN", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%S\","
      "\"lfmt\":\"%N%n%O%n%A%n%C%n%S\","
      "\"require\":\"AC\","
      "\"languages\":\"vi\""
      "}"));
  region_data.insert(std::make_pair("VU", "{"
      "\"languages\":\"bi~en~fr\""
      "}"));
  region_data.insert(std::make_pair("WF", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("WS", "{"
      "\"languages\":\"sm~en\""
      "}"));
  region_data.insert(std::make_pair("XK", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"languages\":\"sq~sr-Cyrl~sr-Latn\""
      "}"));
  region_data.insert(std::make_pair("YE", "{"
      "\"require\":\"AC\","
      "\"languages\":\"ar\""
      "}"));
  region_data.insert(std::make_pair("YT", "{"
      "\"fmt\":\"%O%n%N%n%A%n%Z %C %X\","
      "\"require\":\"ACZ\","
      "\"languages\":\"fr\""
      "}"));
  region_data.insert(std::make_pair("ZA", "{"
      "\"fmt\":\"%N%n%O%n%A%n%C%n%Z\","
      "\"require\":\"ACZ\","
      "\"languages\":\"en~zu~xh~af~nso~tn~st~ts~ss~ve~nr\""
      "}"));
  region_data.insert(std::make_pair("ZM", "{"
      "\"fmt\":\"%N%n%O%n%A%n%Z %C\","
      "\"require\":\"AC\","
      "\"languages\":\"en\""
      "}"));
  region_data.insert(std::make_pair("ZW", "{"
      "\"languages\":\"en~sn~nd\""
      "}"));
  return region_data;
}

}  // namespace

// static
const std::string& RegionDataConstants::GetDefaultRegionData() {
  static const std::string kDefaultRegionData(
      "{"
      "\"fmt\":\"%N%n%O%n%A%n%C\","
      "\"require\":\"AC\","
      "\"zip_name_type\":\"postal\","
      "\"state_name_type\":\"province\""
      "}");
  return kDefaultRegionData;
}
// ---- END AUTOGENERATED CODE ----

namespace {

const std::map<std::string, std::string>& GetAllRegionData() {
  static const std::map<std::string, std::string> kRegionData(InitRegionData());
  return kRegionData;
}

struct SelectFirst {
  template <typename Pair>
  const typename Pair::first_type& operator()(const Pair& pair) const {
    return pair.first;
  }
};

std::vector<std::string> InitRegionCodes() {
  std::vector<std::string> region_codes(GetAllRegionData().size());
  std::transform(GetAllRegionData().begin(), GetAllRegionData().end(),
                 region_codes.begin(), SelectFirst());
  return region_codes;
}

const std::map<std::string, size_t> InitMaxLookupKeyDepth() {
  std::map<std::string, size_t> max_depth;
  for (std::map<std::string, std::string>::const_iterator
       it = GetAllRegionData().begin(); it != GetAllRegionData().end(); ++it) {
    std::vector<FormatElement> fields;
    // Here it->second actually contains the entire JSON blob for this region,
    // and not only the format field, but it doesn't really matter when just
    // checking whether a particular formatting code (eg. "%C") is present, as
    // there isn't anything else in the JSON that erroneously could match a
    // formatting code.
    ParseFormatRule(it->second, &fields);
    size_t depth = 1;
    for (; depth < arraysize(LookupKey::kHierarchy); ++depth) {
      AddressField field = LookupKey::kHierarchy[depth];
      // Check to see if a particular field in the hierarchy is used by
      // addresses in this country. If not, the maximum depth has been reached.
      if (std::find(fields.begin(), fields.end(), FormatElement(field)) ==
          fields.end()) {
        break;
      }
    }
    max_depth.insert(std::make_pair(it->first, depth - 1));
  }
  return max_depth;
}

}  // namespace

// static
const bool RegionDataConstants::IsSupported(const std::string& region_code) {
  static const std::set<std::string> kRegionCodes(GetRegionCodes().begin(),
                                                  GetRegionCodes().end());
  return kRegionCodes.find(region_code) != kRegionCodes.end();
}

// static
const std::vector<std::string>& RegionDataConstants::GetRegionCodes() {
  static const std::vector<std::string> kRegionCodes(InitRegionCodes());
  return kRegionCodes;
}

// static
const std::string& RegionDataConstants::GetRegionData(
    const std::string& region_code) {
  static const std::string kEmptyString;
  std::map<std::string, std::string>::const_iterator it =
      GetAllRegionData().find(region_code);
  return it != GetAllRegionData().end() ? it->second : kEmptyString;
}

// static
size_t RegionDataConstants::GetMaxLookupKeyDepth(
    const std::string& region_code) {
  static const std::map<std::string, size_t> kMaxDepth(InitMaxLookupKeyDepth());
  std::map<std::string, size_t>::const_iterator it =
      kMaxDepth.find(region_code);
  return it != kMaxDepth.end() ? it->second : 0;
}

}  // namespace addressinput
}  // namespace i18n
